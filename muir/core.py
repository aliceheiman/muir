"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_unique_classes', 'parse_clr', 'load_lulc', 'lulc_pixel_stats', 'make_biophysical_table_template']

# %% ../nbs/00_core.ipynb 8
def get_unique_classes(raster_path):
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)
        unique_classes = np.unique(raster_data)
    return unique_classes

# %% ../nbs/00_core.ipynb 11
def parse_clr(lulc_clr_path):
    records = []
    with open(lulc_clr_path, "r") as f:
        for line in f:
            parts = line.strip().split()
            if len(parts) < 6:
                continue  # skip malformed lines
            class_ = int(parts[0])
            r, g, b = map(int, parts[1:4])
            class_name = " ".join(parts[5:])
            color_rgb = (r, g, b)
            color_hex = "#{:02x}{:02x}{:02x}".format(r, g, b)
            records.append({
                "class": class_,
                "color_rgb": color_rgb,
                "color_hex": color_hex,
                "class_name": class_name
            })
    df = pd.DataFrame(records)
    return df

# %% ../nbs/00_core.ipynb 14
def load_lulc(lulc_tif_path, lulc_clr_path):
    unique_classes = get_unique_classes(lulc_tif_path)
    class_mapping = parse_clr(lulc_clr_path)
    relevant_classes = class_mapping[class_mapping['class'].isin(unique_classes)].reset_index(drop=True)
    return relevant_classes

# %% ../nbs/00_core.ipynb 17
def lulc_pixel_stats(raster_path):
    """
    Returns a DataFrame with the number of pixels and area (in square meters) for each unique class in the raster.
    """
    with rasterio.open(raster_path) as src:
        data = src.read(1)
        pixel_area = abs(src.transform.a) * abs(src.transform.e)  # pixel width * pixel height
    classes, counts = np.unique(data, return_counts=True)
    stats = []
    for cls, count in zip(classes, counts):
        area = count * pixel_area
        stats.append({
            'class': cls,
            'pixel_count': count,
            'area_m2': area
        })
    return pd.DataFrame(stats)


# %% ../nbs/00_core.ipynb 23
def make_biophysical_table_template(
    lulc_df: pd.DataFrame,         # DataFrame with LULC classes and names
    columns: list,                 # List of column names for the biophysical values
    output_csv_path: str           # Output CSV file path
    ) -> pd.DataFrame:
    df = lulc_df.copy().reset_index(drop=True)
    table = pd.DataFrame()
    table["lucode"] = df["class"]
    table["description"] = df["class_name"]
    for col in columns:
        table[col] = ""
    table.to_csv(output_csv_path, index=False)
    return table
